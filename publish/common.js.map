{"version":3,"file":"common.js","mappings":"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","sources":["webpack://WebGame/./res/tileImages/Blue.png","webpack://WebGame/./src/resource.js","webpack://WebGame/./res/tileImages/Green.png","webpack://WebGame/./res/tileImages/Purple.png","webpack://WebGame/./res/tileImages/Red.png","webpack://WebGame/./res/tileImages/Yellow.png","webpack://WebGame/./res/tileImages/SuperAll.png","webpack://WebGame/./res/tileImages/SuperRow.png","webpack://WebGame/./res/tileImages/SuperColumn.png","webpack://WebGame/./res/tileImages/SuperBomb.png","webpack://WebGame/./res/uiImages/Bar.png","webpack://WebGame/./res/uiImages/PanelScore.png","webpack://WebGame/./res/uiImages/Progress.png","webpack://WebGame/./res/uiImages/Field.png","webpack://WebGame/./res/uiImages/Booster.png","webpack://WebGame/./src/layers/BaseLayer.js","webpack://WebGame/./src/configs/ui.js","webpack://WebGame/./src/configs/rules.js","webpack://WebGame/./src/layers/UILayer.js","webpack://WebGame/./src/configs/field.js","webpack://WebGame/./src/layers/BaseLayerColor.js","webpack://WebGame/./src/layers/ResultLayer.js","webpack://WebGame/./src/scene.js","webpack://WebGame/./src/helpers/AsyncHelper.js","webpack://WebGame/./src/helpers/TileHelper.js","webpack://WebGame/./src/helpers/AlgorithmHelper.js","webpack://WebGame/./src/helpers/PositionHelper.js","webpack://WebGame/./src/configs/superTiles.js","webpack://WebGame/./src/configs/booster.js","webpack://WebGame/./src/helpers/SuperTileHelper.js","webpack://WebGame/./src/objects/BaseTile.js","webpack://WebGame/./src/layers/GameLayer.js","webpack://WebGame/./src/layers/BoosterLayer.js","webpack://WebGame/./src/app.js","webpack://WebGame/./src/config.js","webpack://WebGame/./src/main.js"],"sourcesContent":["export default \"assets/10e3a100d48c46ae71d6738b34f7994b.png\";","import Blue from '../res/tileImages/Blue.png';\nimport Green from '../res/tileImages/Green.png';\nimport Purple from '../res/tileImages/Purple.png';\nimport Red from '../res/tileImages/Red.png';\nimport Yellow from '../res/tileImages/Yellow.png';\nimport SuperAll from '../res/tileImages/SuperAll.png';\nimport SuperRow from '../res/tileImages/SuperRow.png';\nimport SuperColumn from '../res/tileImages/SuperColumn.png';\nimport SuperBomb from '../res/tileImages/SuperBomb.png';\nimport Bar from '../res/uiImages/Bar.png';\nimport PanelScore from '../res/uiImages/PanelScore.png';\nimport Progress from '../res/uiImages/Progress.png';\nimport Field from '../res/uiImages/Field.png';\nimport Booster from '../res/uiImages/Booster.png';\n\nconst res = {\n    Blue_png: Blue,\n    Green_png: Green,\n    Purple_png: Purple,\n    Red_png: Red,\n    Yellow_png: Yellow,\n    SuperAll_png: SuperAll,\n    SuperRow_png: SuperRow,\n    SuperColumn_png: SuperColumn,\n    SuperBomb_png: SuperBomb,\n    Bar_png: Bar,\n    PanelScore_png: PanelScore,\n    Progress_png: Progress,\n    Field_png: Field,\n    Booster_png: Booster,\n    Marvin_font: {\n        type: 'font',\n        name: 'Marvin',\n        srcs: ['res/fonts/Marvin.ttf'],\n    },\n};\n\nconst gResources = Object.keys(res).map((key) => res[key]);\n\nexport { res, gResources };\n","export default \"assets/f77787336a98094de717393bfa299890.png\";","export default \"assets/ee8d138797d8bf2c5cd6916e6201b20a.png\";","export default \"assets/eca3ba08c9de7ebc861edecd2da6a790.png\";","export default \"assets/dfbe827c5633335bb59e4dedfa698ee4.png\";","export default \"assets/b10c9194ec66cf136e7e60f1363c786e.png\";","export default \"assets/0fb9758e6b806cdaa4f9da16ddbcd984.png\";","export default \"assets/e8f6f84f50a078f31c53ed83b3543c29.png\";","export default \"assets/2765f0b66f038e5684d60e0ddfb4dd74.png\";","export default \"assets/c00b9ed93d0c6282ec0ca263294c33ad.png\";","export default \"assets/24ee5a3071e45bd7e453df29a642450d.png\";","export default \"assets/9f0dfe9126cf7ac3b5f79ad7fe16579a.png\";","export default \"assets/d729ea4c6dab085287f3bacc12ffde9f.png\";","export default \"assets/04ea6183a0236bacd44707b7afe15a81.png\";","const { Layer } = cc;\n\nexport default class BaseLayer {\n    constructor(scene, gameState) {\n        const LayerInstance = Layer.extend({\n            ctor() {\n                this._super();\n                return true;\n            },\n        });\n\n        this.gameState = gameState;\n        this.scene = scene;\n        this.instance = new LayerInstance();\n        scene.addChild(this.instance);\n    }\n}\n","export const commonScale = 0.2;\nexport const UI = {\n    panelScore: {\n        x: 200,\n        y: 400,\n    },\n    gameZone: {\n        x: 100,\n        y: 200,\n    },\n    progressBar: {\n        x: 200,\n        y: 600,\n    },\n    bomb: {\n        x: 700,\n        y: 600,\n    },\n    teleport: {\n        x: 800,\n        y: 600,\n    },\n};\n","export const MIN_CHAIN_LENGTH = 3;\nexport const INIT_MOVES = 30;\nexport const INIT_SCORE = 0;\nexport const MIXES = 1000;\nexport const WIN_POINTS = 500;\n","import { res } from '@/resource';\nimport BaseLayer from './BaseLayer';\nimport { commonScale, UI } from '../configs/ui';\nimport { INIT_MOVES, INIT_SCORE } from '../configs/rules';\n\nconst { Sprite, LabelTTF } = cc;\nexport default class UILayer extends BaseLayer {\n    constructor(scene, gameState) {\n        super(scene, gameState);\n        this.init();\n    }\n\n    init() {\n        this.name = 'ui';\n        this.instance.setName('ui');\n        // eslint-disable-next-line no-undef\n        const panelScore = new Sprite(res.PanelScore_png);\n        panelScore.attr({\n            x: UI.panelScore.x,\n            y: UI.panelScore.y,\n            scale: commonScale,\n        });\n        panelScore.setAnchorPoint(0.5, 1);\n        this.instance.addChild(panelScore);\n        [\n            {\n                string: INIT_MOVES,\n                name: 'moves',\n                fontSize: 256,\n                offset: 170,\n            },\n            {\n                string: 'очки:',\n                name: 'pointsLabel',\n                fontSize: 82,\n                offset: 670,\n            },\n            {\n                string: INIT_SCORE,\n                name: 'points',\n                fontSize: 164,\n                offset: 740,\n            },\n        ].forEach((textData) => {\n            this.addText(textData.string, textData.name, textData.fontSize, {\n                x: UI.panelScore.x,\n                y: UI.panelScore.y - textData.offset * commonScale,\n                scale: commonScale,\n            });\n        });\n\n        // eslint-disable-next-line no-undef\n        const bar = new Sprite(res.Bar_png);\n        bar.attr({\n            scaleX: commonScale,\n            scaleY: commonScale,\n            x: UI.progressBar.x,\n            y: UI.progressBar.y,\n        });\n        bar.setAnchorPoint(0, 0.5);\n        this.instance.addChild(bar);\n\n        // eslint-disable-next-line no-undef\n        const progress = new Sprite(res.Progress_png);\n        progress.attr({\n            scaleX: (commonScale / 0.585) * 0,\n            scaleY: commonScale,\n            x: UI.progressBar.x,\n            y: UI.progressBar.y,\n        });\n        progress.setName('progress');\n        progress.setAnchorPoint(0, 0.5);\n        this.instance.addChild(progress);\n    }\n\n    addText(string, name, fontSize, attr) {\n        const text = new LabelTTF();\n        text.setAnchorPoint(0.5, 1);\n        text.setString(string);\n        text.setName(name);\n        text.setFontSize(fontSize);\n        text.setFontName('Marvin');\n        text.attr(attr);\n        this.instance.addChild(text);\n    }\n}\n","export const WIDTH = 9;\nexport const HEIGHT = 10;\n","const { LayerColor, color, winSize } = cc;\n\nexport default class BaseLayerColor {\n    constructor(scene, layerColor) {\n        const LayerInstance = LayerColor.extend({\n            ctor() {\n                const resultColor = color(layerColor.r, layerColor.g, layerColor.b, layerColor.a);\n                this._super(resultColor, winSize.width, winSize.height);\n                return true;\n            },\n        });\n\n        this.scene = scene;\n        this.instance = new LayerInstance();\n        scene.addChild(this.instance);\n    }\n}\n","import { commonScale, UI } from '../configs/ui';\nimport BaseLayerColor from './BaseLayerColor';\n\nconst { LabelTTF } = cc;\nexport default class ResultLayer extends BaseLayerColor {\n    constructor(scene, result, color) {\n        super(scene, color);\n        this.result = result;\n        this.init();\n    }\n\n    init() {\n        this.instance.setName('result');\n        this.addText(this.result, 'result', 256, {\n            x: UI.panelScore.x,\n            y: UI.panelScore.y - 170 * commonScale,\n            scale: commonScale,\n        });\n    }\n\n    addText(string, name, fontSize, attr) {\n        const text = new LabelTTF();\n        text.setAnchorPoint(0.5, 1);\n        text.setString(string);\n        text.setName(name);\n        text.setFontSize(fontSize);\n        text.setFontName('Marvin');\n        text.attr(attr);\n        text.setLocalZOrder(10);\n        this.instance.addChild(text);\n    }\n}\n","import ResultLayer from './layers/ResultLayer';\n\nexport const LoseScene = cc.Scene.extend({\n    onEnter() {\n        this._super();\n        // eslint-disable-next-line no-unused-vars\n        const resultLayer = new ResultLayer(this, 'Проигрыш', {\n            r: 255,\n            g: 0,\n            b: 0,\n            a: 255,\n        });\n    },\n});\n\nexport const WinScene = cc.Scene.extend({\n    onEnter() {\n        this._super();\n        // eslint-disable-next-line no-unused-vars\n        const resultLayer = new ResultLayer(this, 'Победа', {\n            r: 0,\n            g: 255,\n            b: 0,\n            a: 255,\n        });\n    },\n});\n","export function sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport async function sleepWhen(fn, pauseBetweenTrys = 100, timeout = 5000, message = 'Timed out waiting') {\n    const start = Date.now();\n    // eslint-disable-next-line no-await-in-loop\n    while (!(await fn())) {\n        if (start + timeout < Date.now()) {\n            console.error(message);\n        }\n\n        // eslint-disable-next-line no-await-in-loop\n        await sleep(pauseBetweenTrys);\n    }\n}\n","import { res } from '@/resource';\nimport { commonScale } from '../configs/ui';\n\nconst tileColors = {\n    blue: res.Blue_png,\n    green: res.Green_png,\n    red: res.Red_png,\n    purple: res.Purple_png,\n    yellow: res.Yellow_png,\n};\n\nexport function xTilePosition(width, index, tileWidth = 0) {\n    return width / 2 + tileWidth * commonScale * index;\n}\n\nexport function yTilePosition(height, index, tileWidth = 0) {\n    return height / 1.5 - tileWidth * commonScale * index;\n}\n\nexport function getPositionFromTag(tag) {\n    const x = parseInt(tag[0], 10);\n    const y = parseInt(tag[1], 10);\n    return { x, y };\n}\n\nexport function tagsArrayToList(tagsArray) {\n    return tagsArray.reduce((result, coordinates) => {\n        const { x, y } = getPositionFromTag(coordinates);\n        if (!result[x]) {\n            result[x] = [];\n        }\n        result[x].push(y);\n        return result;\n    }, {});\n}\n\nexport function selectColor() {\n    const tileKeys = Object.keys(tileColors);\n    const randomIndex = Math.floor(Math.random() * tileKeys.length);\n    return tileColors[tileKeys[randomIndex]];\n}\n","import { MIN_CHAIN_LENGTH } from '../configs/rules';\nimport { getPositionFromTag } from './TileHelper';\n\nexport function LeeAlgorithm(startPoint, gameLayerInstance) {\n    if (!startPoint) {\n        return null;\n    }\n\n    let current = [];\n    const marked = [];\n    current.push(startPoint.tag);\n    while (current.length) {\n        // eslint-disable-next-line no-loop-func\n        current.forEach((currentItem) => {\n            const { x, y } = getPositionFromTag(currentItem);\n            [`${x + 1}${y}`, `${x - 1}${y}`, `${x}${y + 1}`, `${x}${y - 1}`].forEach((tag) => {\n                const tile = gameLayerInstance.getChildByTag(tag);\n                const canAdd =\n                    tile && !marked.includes(tag) && !current.includes(tag) && startPoint.colorImg === tile.texture.url;\n                if (canAdd) {\n                    current.push(tag);\n                }\n            });\n            marked.push(currentItem);\n            current = current.filter((currentBufferItem) => currentBufferItem !== currentItem);\n        });\n    }\n    return marked.length && marked.length >= MIN_CHAIN_LENGTH ? marked : null;\n}\n","const { rect, rectContainsPoint } = cc;\n\nexport function isInRect(event, target) {\n    const locationInNode = target.convertToNodeSpace(event.getLocation());\n    const s = target.getContentSize();\n    const myRect = rect(0, 0, s.width, s.height);\n    return rectContainsPoint(myRect, locationInNode);\n}\n","export const MIN_CHAIN = {\n    ROW: 5,\n    COLUMN: 7,\n    BOMB: 9,\n    ALL: 11,\n};\n","export const INIT_BOOSTERS = {\n    bomb: 5,\n    teleport: 6,\n};\n\nexport const BOMB_RADIUS = 4;\n","import { res } from '@/resource';\nimport { getPositionFromTag } from './TileHelper';\nimport { HEIGHT, WIDTH } from '../configs/field';\nimport { MIN_CHAIN } from '../configs/superTiles';\nimport { BOMB_RADIUS } from '../configs/booster';\n\nexport function selectAction(length, tag) {\n    if (length >= MIN_CHAIN.ALL) {\n        return { action: res.SuperAll_png, tag };\n    }\n    if (length >= MIN_CHAIN.BOMB) {\n        return { action: res.SuperBomb_png, tag };\n    }\n    if (length >= MIN_CHAIN.COLUMN) {\n        return { action: res.SuperColumn_png, tag };\n    }\n    if (length >= MIN_CHAIN.ROW) {\n        return { action: res.SuperRow_png, tag };\n    }\n    return null;\n}\n\n// Проходим по кругу по сторонам ромба и вносим его координаты\nexport function createBomb(tag) {\n    const R = BOMB_RADIUS;\n    const { x, y } = getPositionFromTag(tag);\n    const tiles = [];\n    for (let i = 0; i < R; i += 1) {\n        for (let j = 0; j < R - i; j += 1) {\n            tiles.push(`${x - R + 1 + j + i}${y + j}`);\n        }\n        for (let j = 0; j < R - i - 1; j += 1) {\n            tiles.push(`${x + 1 + j}${y + R - 2 - j - i}`);\n        }\n        for (let j = 0; j < R - i - 1; j += 1) {\n            tiles.push(`${x + R - 2 - j - i}${y - 1 - j}`);\n        }\n        for (let j = 0; j < R - i - 2; j += 1) {\n            tiles.push(`${x - 1 - j}${y - R + 2 + j + i}`);\n        }\n    }\n    return tiles;\n}\n\nexport function selectTilesBySuper(superTileImg, tag) {\n    const superTiles = [];\n    if (superTileImg === res.SuperAll_png) {\n        for (let i = 0; i < WIDTH; i += 1) {\n            for (let j = 0; j < HEIGHT; j += 1) {\n                superTiles.push(`${i}${j}`);\n            }\n        }\n    }\n    if (superTileImg === res.SuperRow_png) {\n        const { y } = getPositionFromTag(tag);\n        for (let i = 0; i < WIDTH; i += 1) {\n            superTiles.push(`${i}${y}`);\n        }\n    }\n    if (superTileImg === res.SuperColumn_png) {\n        const { x } = getPositionFromTag(tag);\n        for (let i = 0; i < HEIGHT; i += 1) {\n            superTiles.push(`${x}${i}`);\n        }\n    }\n    if (superTileImg === res.SuperBomb_png) {\n        superTiles.push(...createBomb(tag));\n    }\n    return superTiles;\n}\n","import { commonScale } from '../configs/ui';\nimport { isInRect } from '../helpers/PositionHelper';\nimport { LeeAlgorithm } from '../helpers/AlgorithmHelper';\nimport { selectAction, selectTilesBySuper } from '../helpers/SuperTileHelper';\nimport { getPositionFromTag, selectColor, xTilePosition, yTilePosition } from '../helpers/TileHelper';\n\nconst { Sprite, eventManager, winSize, FadeIn, EventListener } = cc;\n\nexport default class BaseTile {\n    constructor(gameLayer, x, y, color = null) {\n        this.gameLayer = gameLayer;\n        this.x = x;\n        this.y = y;\n        this.tag = `${x}${y}`;\n        this.color = color ?? selectColor();\n        this.init();\n    }\n\n    init() {\n        const tile = new Sprite(this.color);\n        tile.attr({\n            x: xTilePosition(winSize.width, this.x, tile.width),\n            y: yTilePosition(winSize.height, this.y, tile.width),\n            scale: commonScale,\n        });\n        tile.setTag(this.tag);\n        tile.setName(this.tag);\n        tile.setAnchorPoint(0, 1);\n        if (!this.color) {\n            tile.setOpacity(0);\n        }\n        tile.runAction(FadeIn.create(1));\n        eventManager.addListener(this.tileTouchListener(), tile);\n        eventManager.addListener(this.tileMouseListener(), tile);\n        this.gameLayer.instance.addChild(tile);\n        this.tile = this.gameLayer.instance.getChildByTag(this.tag);\n    }\n\n    tileMouseListener() {\n        const parent = this;\n        return {\n            event: EventListener.MOUSE,\n            onMouseMove(event) {\n                if (!isInRect(event, parent.tile)) {\n                    if (parent.gameLayer.mouseOvered === parent.tag) {\n                        parent.gameLayer.mouseOvered = null;\n                    }\n                    return;\n                }\n                parent.gameLayer.mouseOvered = parent.tag;\n            },\n        };\n    }\n\n    tileTouchListener() {\n        const parent = this;\n        return {\n            event: EventListener.TOUCH_ONE_BY_ONE,\n            async onTouchBegan(touch, event) {\n                const target = event.getCurrentTarget();\n                if (!isInRect(touch, target)) {\n                    return false;\n                }\n\n                if (parent.gameLayer.tileToReplace) {\n                    parent.gameLayer.swapTiles(parent.gameLayer.tileToReplace, parent.tag);\n                    parent.gameLayer.tileToReplace = null;\n                    parent.gameLayer.locked = false;\n                    return true;\n                }\n\n                const tilesBySuper = selectTilesBySuper(target.texture.url, parent.tag);\n                if (tilesBySuper.length) {\n                    return parent.gameLayer.doMove(tilesBySuper);\n                }\n\n                const tilesToDelete = LeeAlgorithm(\n                    {\n                        tag: parent.tag,\n                        colorImg: parent.color,\n                    },\n                    parent.gameLayer.instance,\n                );\n                if (!tilesToDelete) {\n                    return false;\n                }\n\n                const superTileInfo = selectAction(tilesToDelete.length, parent.tag);\n                return parent.gameLayer.doMove(tilesToDelete, false, superTileInfo);\n            },\n        };\n    }\n\n    moveTile(oldTag, newTag) {\n        const oldPlace = this.gameLayer.instance.getChildByTag(oldTag);\n        if (!oldPlace) {\n            return;\n        }\n        const newPlace = this.gameLayer.instance.getChildByTag(newTag);\n        if (newPlace) {\n            return;\n        }\n\n        const color = oldPlace.texture.url;\n        this.gameLayer.instance.removeChildByTag(oldTag, true);\n        const { x, y } = getPositionFromTag(newTag);\n        this.gameLayer.tiles[`${x}${y}`] = new BaseTile(this.gameLayer, x, y, color);\n    }\n}\n","import { res } from '@/resource';\nimport { commonScale, UI } from '../configs/ui';\nimport { WIDTH, HEIGHT } from '../configs/field';\nimport BaseLayer from './BaseLayer';\nimport { LoseScene, WinScene } from '../scene';\nimport { sleep, sleepWhen } from '../helpers/AsyncHelper';\nimport { LeeAlgorithm } from '../helpers/AlgorithmHelper';\nimport { MIXES, WIN_POINTS } from '../configs/rules';\nimport BaseTile from '../objects/BaseTile';\nimport { createBomb } from '../helpers/SuperTileHelper';\nimport { getPositionFromTag, tagsArrayToList, xTilePosition, yTilePosition } from '../helpers/TileHelper';\n\nconst { Sprite, winSize, director, FadeOut } = cc;\n\nexport default class GameLayer extends BaseLayer {\n    locked = false;\n\n    mouseOvered = null;\n\n    tileToReplace = null;\n\n    constructor(scene, gameState) {\n        super(scene, gameState);\n        this.init();\n    }\n\n    init() {\n        this.tiles = {};\n        this.name = 'game';\n        this.instance.setContentSize(cc.winSize.width / 2, cc.winSize.height / 2);\n        this.instance.setName('game');\n        const field = new Sprite(res.Field_png);\n        field.attr({\n            x: xTilePosition(winSize.width, 0),\n            y: yTilePosition(winSize.height, 0),\n            scale: commonScale,\n        });\n        field.setAnchorPoint(0.03, 0.97);\n        this.instance.addChild(field);\n        for (let y = HEIGHT - 1; y >= 0; y -= 1) {\n            for (let x = 0; x < WIDTH; x += 1) {\n                this.tiles[`${x}${y}`] = new BaseTile(this, x, y);\n            }\n        }\n        return true;\n    }\n\n    hasChain() {\n        for (let y = HEIGHT - 1; y >= 0; y -= 1) {\n            for (let x = 0; x < WIDTH; x += 1) {\n                const tag = `${x}${y}`;\n                const colorImg = this.instance.getChildByTag(tag).texture.url;\n                const tilesToDelete = LeeAlgorithm({ tag, colorImg }, this.instance);\n                if (tilesToDelete) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    moveDownTiles(deletedTilesList) {\n        Object.keys(deletedTilesList).forEach((column) => {\n            let columnArray = deletedTilesList[column];\n            while (columnArray.length) {\n                const sortedColumnArray = columnArray.sort((rowA, rowB) => rowB - rowA);\n                const lowestEmptyRow = sortedColumnArray.shift(0);\n                for (let upperRow = lowestEmptyRow - 1; upperRow >= 0; upperRow -= 1) {\n                    const oldTag = `${column}${upperRow}`;\n                    if (this.instance.getChildByTag(oldTag)) {\n                        const newTag = `${column}${lowestEmptyRow}`;\n                        this.tiles[oldTag].moveTile(oldTag, newTag);\n                        columnArray.push(upperRow);\n                        break;\n                    }\n                }\n                columnArray = sortedColumnArray;\n            }\n        });\n    }\n\n    fillEmptyTiles(deletedTilesList) {\n        Object.keys(deletedTilesList).forEach((column) => {\n            for (let row = deletedTilesList[column].length - 1; row >= 0; row -= 1) {\n                this.tiles[`${column}${row}`] = new BaseTile(this, column, row);\n            }\n        });\n    }\n\n    swapTiles(firstTag, secondTag) {\n        const firstPlace = this.instance.getChildByTag(firstTag);\n        if (!firstPlace) {\n            return;\n        }\n        const secondPlace = this.instance.getChildByTag(secondTag);\n        if (!secondPlace) {\n            return;\n        }\n\n        const firstColor = firstPlace.texture.url;\n        const secondColor = secondPlace.texture.url;\n        this.instance.removeChildByTag(firstTag, true);\n        this.instance.removeChildByTag(secondTag, true);\n        const { x: firstX, y: firstY } = getPositionFromTag(firstTag);\n        this.tiles[`${firstX}${firstY}`] = new BaseTile(this, firstX, firstY, secondColor);\n        const { x: secondX, y: secondY } = getPositionFromTag(secondTag);\n        this.tiles[`${secondX}${secondY}`] = new BaseTile(this, secondX, secondY, firstColor);\n    }\n\n    selectTileToReplace() {\n        if (this.locked) {\n            return;\n        }\n        this.locked = true;\n        this.tileToReplace = this.mouseOvered;\n    }\n\n    async deleteTiles(tiles) {\n        const promises = tiles.map((deletedTile) => {\n            const tile = this.instance.getChildByTag(deletedTile);\n            if (!tile) {\n                return null;\n            }\n            const action = FadeOut.create(1);\n            tile.runAction(action);\n            return sleepWhen(() => {\n                if (action.isDone()) {\n                    this.instance.removeChildByTag(deletedTile);\n                    return true;\n                }\n                return false;\n            }, 1);\n        });\n        await Promise.all(promises);\n    }\n\n    mixTiles() {\n        for (let i = 0; i < MIXES; i += 1) {\n            const firstTag = `${Math.floor(Math.random() * WIDTH)}${Math.floor(Math.random() * HEIGHT)}`;\n            const secondTag = `${Math.floor(Math.random() * WIDTH)}${Math.floor(Math.random() * HEIGHT)}`;\n            if (firstTag !== secondTag) {\n                this.swapTiles(firstTag, secondTag);\n            }\n        }\n    }\n\n    createSuperTile(superTileInfo, tiles) {\n        const { x, y } = getPositionFromTag(superTileInfo.tag);\n        this.tiles[`${x}${y}`] = new BaseTile(this, x, y, superTileInfo.action);\n        const tagIndex = tiles.findIndex((tagItem) => tagItem === superTileInfo.tag);\n        tiles.splice(tagIndex, 1);\n    }\n\n    hasBombConflict(isBomb) {\n        return isBomb && !this.mouseOvered;\n    }\n\n    async doMove(tiles = null, isBomb = false, superTileInfo = null) {\n        if (this.hasBombConflict(isBomb)) {\n            return false;\n        }\n        if (this.locked) {\n            return false;\n        }\n        this.locked = true;\n        const uiLayer = this.scene.getChildByName('ui');\n        const movesElem = uiLayer.getChildByName('moves');\n        const pointsElem = uiLayer.getChildByName('points');\n        const progressElem = uiLayer.getChildByName('progress');\n\n        const tilesToDelete = tiles ?? (isBomb ? createBomb(this.mouseOvered) : []);\n        const filteredTilesToDelete = tilesToDelete.filter((tile) => !!this.instance.getChildByTag(tile));\n        const points = parseInt(pointsElem.getString(), 10) + filteredTilesToDelete.length;\n        const movesLeft = parseInt(movesElem.getString(), 10) - 1;\n        movesElem.setString(movesLeft);\n        pointsElem.setString(points);\n\n        progressElem.attr({\n            x: UI.progressBar.x,\n            y: UI.progressBar.y,\n            scaleX: (commonScale / 0.585) * (points / WIN_POINTS),\n            scaleY: commonScale,\n        });\n\n        await this.deleteTiles(filteredTilesToDelete);\n\n        const cloneTiles = JSON.parse(JSON.stringify(filteredTilesToDelete));\n        if (superTileInfo) {\n            this.createSuperTile(superTileInfo, filteredTilesToDelete);\n        }\n\n        const tilesToMove = tagsArrayToList(cloneTiles);\n        const deletedTilesToFill = tagsArrayToList(filteredTilesToDelete);\n\n        this.moveDownTiles(tilesToMove);\n        this.fillEmptyTiles(deletedTilesToFill);\n\n        if (points >= WIN_POINTS) {\n            await sleep(1000);\n            director.runScene(new WinScene());\n            this.locked = false;\n            return false;\n        }\n\n        if (movesLeft <= 0) {\n            await sleep(1000);\n            director.runScene(new LoseScene());\n            this.locked = false;\n            return false;\n        }\n\n        if (!this.hasChain()) {\n            this.mixTiles();\n            this.locked = false;\n            return false;\n        }\n\n        this.locked = false;\n        return true;\n    }\n}\n","import { res } from '@/resource';\nimport BaseLayer from './BaseLayer';\nimport { INIT_BOOSTERS } from '../configs/booster';\nimport { commonScale, UI } from '../configs/ui';\nimport { isInRect } from '../helpers/PositionHelper';\n\nconst { Sprite, LabelTTF, eventManager, EventListener } = cc;\nexport default class BoosterLayer extends BaseLayer {\n    constructor(scene, gameState) {\n        super(scene, gameState);\n        this.init();\n    }\n\n    init() {\n        this.instance.setContentSize(cc.winSize.width / 2, cc.winSize.height / 2);\n        this.instance.setName('booster');\n        [{ name: 'bomb' }, { name: 'teleport' }].forEach((booster) => {\n            this.initBooster(booster.name);\n        });\n    }\n\n    initBooster(name) {\n        const booster = new Sprite(res.Booster_png);\n        booster.setAnchorPoint(0.5, 1);\n        booster.setName(name);\n        booster.attr({\n            x: UI[name].x,\n            y: UI[name].y,\n            scale: commonScale,\n        });\n        this.instance.addChild(booster);\n        this.addText(INIT_BOOSTERS[name], `${name}Text`, 80, {\n            x: UI[name].x - 30 * commonScale,\n            y: UI[name].y - 265 * commonScale,\n            scale: commonScale,\n        });\n        eventManager.addListener(this.eventListener(name), booster);\n    }\n\n    eventListener(name) {\n        const { instance } = this;\n        const tag = 123;\n        const gameLayer = this.gameState.find((layer) => layer.name === 'game');\n        return {\n            event: EventListener.TOUCH_ONE_BY_ONE,\n            onTouchBegan(touch, event) {\n                const target = event.getCurrentTarget();\n                if (!isInRect(touch, target)) {\n                    return false;\n                }\n\n                const booster = new Sprite(res.Blue_png);\n                booster.attr({\n                    x: touch.getLocationX(),\n                    y: touch.getLocationY(),\n                    scale: commonScale,\n                });\n                booster.setTag(tag);\n                instance.addChild(booster);\n                return true;\n            },\n            onTouchMoved(touch) {\n                const booster = instance.getChildByTag(tag);\n                booster.setPositionX(touch.getLocationX());\n                booster.setPositionY(touch.getLocationY());\n            },\n            async onTouchEnded() {\n                instance.removeChildByTag(tag);\n                if (name === 'bomb') {\n                    await gameLayer.doMove(null, true);\n                }\n                if (name === 'teleport') {\n                    gameLayer.selectTileToReplace();\n                }\n            },\n        };\n    }\n\n    addText(string, name, fontSize, attr) {\n        const text = new LabelTTF();\n        text.setAnchorPoint(0.5, 1);\n        text.setString(string);\n        text.setName(name);\n        text.setFontSize(fontSize);\n        text.setFontName('Marvin');\n        text.attr(attr);\n        text.setLocalZOrder(10);\n        this.instance.addChild(text);\n    }\n}\n","import UILayer from './layers/UILayer';\nimport GameLayer from './layers/GameLayer';\nimport BaseLayerColor from './layers/BaseLayerColor';\nimport BoosterLayer from './layers/BoosterLayer';\n\nconst gameState = [];\nconst GameScene = cc.Scene.extend({\n    onEnter() {\n        this._super();\n        const colorLayer = new BaseLayerColor(this, {\n            r: 161,\n            g: 161,\n            b: 161,\n            a: 255,\n        });\n        gameState.push(colorLayer);\n        const uiLayer = new UILayer(this, gameState);\n        gameState.push(uiLayer);\n        const gameLayer = new GameLayer(this, gameState);\n        gameState.push(gameLayer);\n        const boosterLayer = new BoosterLayer(this, gameState);\n        gameState.push(boosterLayer);\n    },\n});\n\nexport default GameScene;\n","import GameScene from '@/app';\nimport { gResources } from '@/resource';\n\nexport default () => {\n    const { sys, view, LoaderScene, director, ResolutionPolicy } = cc;\n    if (!sys.isNative && document.getElementById('cocosLoading')) {\n        document.body.removeChild(document.getElementById('cocosLoading'));\n    }\n\n    // Pass true to enable retina display, on Android disabled by default to improve performance\n    view.enableRetina(sys.os === sys.OS_IOS);\n\n    // Disable auto full screen on baidu and wechat, you might also want to eliminate sys.BROWSER_TYPE_MOBILE_QQ\n    if (sys.isMobile && sys.browserType !== sys.BROWSER_TYPE_BAIDU && sys.browserType !== sys.BROWSER_TYPE_WECHAT) {\n        view.enableAutoFullScreen(true);\n    }\n\n    // Adjust viewport meta\n    view.adjustViewPort(true);\n\n    // Uncomment the following line to set a fixed orientation for your game\n    // view.setOrientation(cc.ORIENTATION_PORTRAIT);\n\n    // Setup the resolution policy and design resolution size\n    view.setDesignResolutionSize(960, 640, ResolutionPolicy.SHOW_ALL);\n\n    // The game will be resized when browser size change\n    view.resizeWithBrowserSize(true);\n\n    LoaderScene.preload(\n        gResources,\n        () => {\n            director.runScene(new GameScene());\n        },\n        this,\n    );\n};\n","const { game } = cc;\ngame.onStart = () => {\n    import('@/config').then((config) => {\n        config.default();\n    });\n};\n\ngame.run();\n"],"names":["res","Blue_png","Green_png","Purple_png","Red_png","Yellow_png","SuperAll_png","SuperRow_png","SuperColumn_png","SuperBomb_png","Bar_png","PanelScore_png","Progress_png","Field_png","Booster_png","Marvin_font","type","name","srcs","gResources","Object","keys","map","key","Layer","cc","BaseLayer","scene","gameState","LayerInstance","extend","ctor","this","_super","instance","addChild","commonScale","UI","panelScore","x","y","gameZone","progressBar","bomb","teleport","INIT_MOVES","INIT_SCORE","WIN_POINTS","Sprite","LabelTTF","UILayer","init","setName","attr","scale","setAnchorPoint","string","fontSize","offset","forEach","textData","addText","bar","scaleX","scaleY","progress","text","setString","setFontSize","setFontName","HEIGHT","LayerColor","color","winSize","BaseLayerColor","layerColor","resultColor","r","g","b","a","width","height","ResultLayer","result","setLocalZOrder","LoseScene","Scene","onEnter","WinScene","sleep","ms","Promise","resolve","setTimeout","sleepWhen","fn","pauseBetweenTrys","timeout","message","start","Date","now","console","error","tileColors","blue","green","red","purple","yellow","xTilePosition","index","tileWidth","yTilePosition","getPositionFromTag","tag","parseInt","tagsArrayToList","tagsArray","reduce","coordinates","push","selectColor","tileKeys","randomIndex","Math","floor","random","length","LeeAlgorithm","startPoint","gameLayerInstance","current","marked","currentItem","tile","getChildByTag","includes","colorImg","texture","url","filter","currentBufferItem","rect","rectContainsPoint","isInRect","event","target","locationInNode","convertToNodeSpace","getLocation","s","getContentSize","myRect","MIN_CHAIN","INIT_BOOSTERS","createBomb","tiles","i","j","selectTilesBySuper","superTileImg","superTiles","eventManager","FadeIn","EventListener","BaseTile","gameLayer","setTag","setOpacity","runAction","create","addListener","tileTouchListener","tileMouseListener","parent","MOUSE","onMouseMove","mouseOvered","TOUCH_ONE_BY_ONE","onTouchBegan","touch","getCurrentTarget","tileToReplace","swapTiles","locked","tilesBySuper","doMove","tilesToDelete","superTileInfo","action","oldTag","newTag","oldPlace","removeChildByTag","director","FadeOut","GameLayer","setContentSize","field","deletedTilesList","column","columnArray","sortedColumnArray","sort","rowA","rowB","lowestEmptyRow","shift","upperRow","moveTile","row","firstTag","secondTag","firstPlace","secondPlace","firstColor","secondColor","firstX","firstY","secondX","secondY","promises","deletedTile","isDone","all","tagIndex","findIndex","tagItem","splice","isBomb","hasBombConflict","uiLayer","getChildByName","movesElem","pointsElem","progressElem","filteredTilesToDelete","points","getString","movesLeft","deleteTiles","cloneTiles","JSON","parse","stringify","createSuperTile","tilesToMove","deletedTilesToFill","moveDownTiles","fillEmptyTiles","runScene","hasChain","mixTiles","BoosterLayer","booster","initBooster","eventListener","find","layer","getLocationX","getLocationY","onTouchMoved","setPositionX","setPositionY","onTouchEnded","selectTileToReplace","colorLayer","boosterLayer","sys","view","LoaderScene","ResolutionPolicy","isNative","document","getElementById","body","removeChild","enableRetina","os","OS_IOS","isMobile","browserType","BROWSER_TYPE_BAIDU","BROWSER_TYPE_WECHAT","enableAutoFullScreen","adjustViewPort","setDesignResolutionSize","SHOW_ALL","resizeWithBrowserSize","preload","GameScene","game","onStart","then","config","run"],"sourceRoot":""}